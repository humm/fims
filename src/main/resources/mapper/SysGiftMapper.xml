<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hoomoomoo.fims.app.dao.SysGiftDao">

    <sql id="Base_Column_List">
        gift_id giftId, gift_type giftType,
        gift_sender giftSender, gift_receiver giftReceiver,
        gift_date giftDate, gift_amount giftAmount,
        gift_memo giftMemo,
        create_date createDate, modify_date modifyDate,
        create_user createUser, modify_user modifyUser
    </sql>

    <select id="selectPage" parameterType="com.hoomoomoo.fims.app.model.SysGiftQueryModel"
            resultType="com.hoomoomoo.fims.app.model.SysGiftModel">
        select
            <include refid="Base_Column_List"/>
        from sys_gift
        <where>
            <if test="giftId != null">
                and gift_id = #{giftId}
            </if>
            <if test="giftType != null">
                and gift_type = #{giftType}
            </if>
            <if test="giftSender != null">
                and gift_sender = #{giftSender}
            </if>
            <if test="giftReceiver != null">
                and gift_receiver = #{giftReceiver}
            </if>
            <if test="giftDate != null">
                and to_char(gift_date, 'yyyy-MM') = to_char(#{giftDate}, 'yyyy-MM')
            </if>
            <if test="giftAmount != null">
                and gift_amount = #{giftAmount}
            </if>
            <if test="isAdmin == false">
                and (
                    substr(gift_sender, instr(gift_sender, '-') + 1) = #{userKey}
                    or
                    substr(gift_receiver, instr(gift_receiver, '-') + 1) = #{userKey}
                )
            </if>
        </where>
        order by
        <if test="sort != null and order != null">
            ${sort} ${order}
        </if>
        <if test="sort != null and order == null">
            ${sort}
        </if>
        <if test="sort == null">
            modify_date desc
        </if>
    </select>

    <delete id="delete" parameterType="java.util.List">
        delete from sys_gift
        <where>
            gift_id in
            <foreach collection="list" item="item" index="index" open="(" separator="," close=")">
                #{item.giftId}
            </foreach>
        </where>
    </delete>

    <select id="selectOne" parameterType="com.hoomoomoo.fims.app.model.SysGiftQueryModel"
            resultType="com.hoomoomoo.fims.app.model.SysGiftModel">
        select
            <include refid="Base_Column_List"/>
        from sys_gift
        <where>
            <if test="giftId != null">
                and gift_id = #{giftId}
            </if>
            <if test="giftType != null">
                and gift_type = #{giftType}
            </if>
            <if test="giftSender != null">
                and gift_sender = #{giftSender}
            </if>
            <if test="giftReceiver != null">
                and gift_receiver = #{giftReceiver}
            </if>
            <if test="giftDate != null">
                and to_char(gift_date, 'yyyy-MM') = to_char(#{giftDate}, 'yyyy-MM')
            </if>
            <if test="giftAmount != null">
                and gift_amount = #{giftAmount}
            </if>
        </where>
    </select>

    <select id="selectLastType" parameterType="com.hoomoomoo.fims.app.model.SysGiftQueryModel"
            resultType="com.hoomoomoo.fims.app.model.common.LastType">
        select s.gift_type as giftType
        from (
            select t.gift_type
            from sys_gift t
            where substr(t.gift_sender, instr(t.gift_sender, '-') + 1) = #{giftSender}
            or substr(t.gift_receiver, instr(t.gift_receiver, '-') + 1) = #{giftSender}
            order by t.modify_date desc
        )s
        where rownum = 1
    </select>

    <update id="save" parameterType="com.hoomoomoo.fims.app.model.SysIncomeModel">
        merge into sys_gift a
        using (select #{giftId} as gift_id from dual) b
        on (a.gift_id = b.gift_id)
        when matched then
        update
        <set>
            <if test="giftSender != null">
                gift_sender = #{giftSender},
            </if>
            <if test="giftReceiver != null">
                gift_receiver = #{giftReceiver},
            </if>

            <if test="giftType != null">
                gift_type = #{giftType},
            </if>
            <if test="giftDate != null">
                gift_date = #{giftDate},
            </if>
            <if test="giftAmount != null">
                gift_amount = #{giftAmount},
            </if>
            <if test="giftMemo != null">
                gift_memo = #{giftMemo},
            </if>
            <if test="modifyDate != null">
                modify_date = #{modifyDate},
            </if>
            <if test="modifyUser != null">
                modify_user = #{modifyUser}
            </if>
        </set>
        where gift_id = #{giftId}
        when not matched then
        insert(
            gift_id,
            gift_type,
            gift_sender,
            gift_receiver,
            gift_date,
            gift_amount,
            gift_memo,
            create_date,
            create_user,
            modify_date,
            modify_user
        )
        values(
            #{giftId},
            #{giftType},
            #{giftSender},
            #{giftReceiver},
            #{giftDate},
            #{giftAmount},
            #{giftMemo},
            #{createDate},
            #{createUser},
            #{modifyDate},
            #{modifyUser}
        )
    </update>

</mapper>